/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package joy;

/**
 *
 * @author admin
 */

import java.awt.Color;
//import java.awt.TextArea;
import java.sql.*;
//import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.Date;
//import java.util.logging.Level;
//import java.util.logging.Logger;
//import javax.swing.JTable;
import javax.swing.JTextField;

public class orders extends javax.swing.JFrame {
    int lastid;

    /**
     * Creates new form orders
     */
    
    Connection cn;
    PreparedStatement pst;
    ResultSet rs;
    Statement st;
    
    public orders() {
        initComponents();
        myconnection();
        getsum();
        Fill_date();
        menutable.getColumnModel().getColumn(2).setPreferredWidth(400);
        menutable.getTableHeader().setOpaque(false);
        menutable.getTableHeader().setBackground(new Color(32,136,203));
        menutable.getTableHeader().setForeground(new Color(70,70,70));
        menutable.setRowHeight(30);
        
        myorder.getColumnModel().getColumn(1).setPreferredWidth(200);
        myorder.getTableHeader().setOpaque(false);
        myorder.getTableHeader().setBackground(new Color(32,136,203));
        myorder.getTableHeader().setForeground(new Color(70,70,70));
        myorder.setRowHeight(30);
        
        String url = "jdbc:mysql://localhost/studentdatabase";
        String user ="root";
        String pass = "";
        try {
            cn = DriverManager.getConnection(url,user,pass);
            
        }
        catch (Exception ex)
        {
            System.out.println("Error :" +ex.getMessage());
        }
        
    }
    
    public void getlastid()
    {
        try
        {
            cn=DriverManager.getConnection("jdbc:mysql://localhost/studentdatabase", "root", null);
             String sql = "select max(ORDER_ID) from orders";         
             st = cn.createStatement();
             
             rs = st.executeQuery(sql);
             if(rs.next())
             {
                 lastid = rs.getInt(1);
                 lastid++;
                 txtorderid.setText(Integer.toString(lastid));
             }
        }   
        catch (Exception e)
        {
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        breakfast = new javax.swing.JButton();
        lunch = new javax.swing.JButton();
        dinner = new javax.swing.JButton();
        dessert = new javax.swing.JButton();
        drinks = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        menutable = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        myorder = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        txtsubtotal = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtfoodname = new javax.swing.JTextField();
        txtquantity = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtprice = new javax.swing.JTextField();
        Date = new javax.swing.JLabel();
        txtdate = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        txtlocation = new javax.swing.JTextField();
        submit = new javax.swing.JButton();
        update = new javax.swing.JButton();
        order = new javax.swing.JButton();
        txttotal = new javax.swing.JTextField();
        Delete = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtorderid = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtmealid = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        logout = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 153, 153));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(255, 153, 153), null, null));

        breakfast.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        breakfast.setForeground(new java.awt.Color(255, 153, 153));
        breakfast.setIcon(new javax.swing.ImageIcon("C:\\Users\\admin\\Downloads\\icons8-dumplings-48.png")); // NOI18N
        breakfast.setText("Breakfast");
        breakfast.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        breakfast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                breakfastActionPerformed(evt);
            }
        });

        lunch.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lunch.setForeground(new java.awt.Color(255, 153, 153));
        lunch.setIcon(new javax.swing.ImageIcon("C:\\Users\\admin\\Downloads\\icons8-hamburger-48.png")); // NOI18N
        lunch.setText("Lunch");
        lunch.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        lunch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lunchActionPerformed(evt);
            }
        });

        dinner.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        dinner.setForeground(new java.awt.Color(255, 153, 153));
        dinner.setIcon(new javax.swing.ImageIcon("C:\\Users\\admin\\Downloads\\icons8-pizza-48.png")); // NOI18N
        dinner.setText("Dinner");
        dinner.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        dinner.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        dinner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dinnerActionPerformed(evt);
            }
        });

        dessert.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        dessert.setForeground(new java.awt.Color(255, 153, 153));
        dessert.setIcon(new javax.swing.ImageIcon("C:\\Users\\admin\\Downloads\\icons8-ice-cream-cone-48.png")); // NOI18N
        dessert.setText("Dessert");
        dessert.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        dessert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dessertActionPerformed(evt);
            }
        });

        drinks.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        drinks.setForeground(new java.awt.Color(255, 153, 153));
        drinks.setIcon(new javax.swing.ImageIcon("C:\\Users\\admin\\Downloads\\icons8-juice-bottle-48.png")); // NOI18N
        drinks.setText("Drinks");
        drinks.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        drinks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drinksActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(breakfast, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(115, 115, 115)
                .addComponent(lunch, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(151, 151, 151)
                .addComponent(dinner, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(151, 151, 151)
                .addComponent(dessert, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 184, Short.MAX_VALUE)
                .addComponent(drinks, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(breakfast, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lunch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dinner, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dessert, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(drinks, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        menutable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Meal ID", "Meal Name", "Description", "Price"
            }
        )
        {
            public boolean isCellEditable(int row, int column)
            {
                return false;
            }
        }
    );
    menutable.setGridColor(new java.awt.Color(255, 255, 0));
    menutable.setRowHeight(30);
    menutable.getTableHeader().setReorderingAllowed(false);
    menutable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            menutableMouseClicked(evt);
        }
    });
    jScrollPane1.setViewportView(menutable);

    myorder.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "Order ID", "Name", "Price", "Quantity", "DeliveryDate", "Location", "Total"
        }
    ));
    myorder.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            myorderMouseClicked(evt);
        }
    });
    jScrollPane2.setViewportView(myorder);

    jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 22)); // NOI18N
    jLabel9.setText("     SUB-TOTAL");

    txtsubtotal.setEditable(false);
    txtsubtotal.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N

    jPanel2.setBackground(new java.awt.Color(255, 153, 153));
    jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
    jPanel2.setEnabled(false);

    jLabel5.setText("Name");

    txtfoodname.setEditable(false);

    jLabel6.setText("Price");

    jLabel7.setText("Quantity");

    txtprice.setEditable(false);

    Date.setText("Delivery Date");

    txtdate.setDateFormatString("yyyy-MM-dd");

    jLabel4.setText("Address");

    txtlocation.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtlocationActionPerformed(evt);
        }
    });

    submit.setIcon(new javax.swing.ImageIcon("C:\\Users\\admin\\Downloads\\Cafe Image & Icon\\images\\add to cart.png")); // NOI18N
    submit.setText("Add to Cart");
    submit.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            submitActionPerformed(evt);
        }
    });

    update.setIcon(new javax.swing.ImageIcon("C:\\Users\\admin\\Downloads\\Cafe Image & Icon\\images\\view edit delete product.png")); // NOI18N
    update.setText("Update");
    update.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            updateActionPerformed(evt);
        }
    });

    order.setIcon(new javax.swing.ImageIcon("C:\\Users\\admin\\Downloads\\Cafe Image & Icon\\images\\View Bills & Order Placed Details.png")); // NOI18N
    order.setText("Display Order");
    order.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            orderActionPerformed(evt);
        }
    });

    txttotal.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            txttotalMouseClicked(evt);
        }
    });
    txttotal.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            txttotalActionPerformed(evt);
        }
    });

    Delete.setIcon(new javax.swing.ImageIcon("C:\\Users\\admin\\Downloads\\Cafe Image & Icon\\images\\delete.png")); // NOI18N
    Delete.setText("Delete");
    Delete.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            DeleteActionPerformed(evt);
        }
    });

    jLabel3.setText("Order ID");

    txtorderid.setEditable(false);

    jLabel2.setText("Meal ID");

    txtmealid.setEditable(false);

    jLabel11.setText("Total ");

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(Date)
                            .addGap(36, 36, 36)
                            .addComponent(txtdate, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(34, 34, 34)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txttotal, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                                    .addComponent(txtfoodname)
                                    .addComponent(txtprice)
                                    .addComponent(txtquantity)
                                    .addComponent(txtorderid)
                                    .addComponent(txtmealid))
                                .addComponent(txtlocation, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(submit)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(update, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(18, 18, 18)
                    .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(order, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(jLabel3)
                    .addGap(0, 0, Short.MAX_VALUE))))
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel3)
                .addComponent(txtorderid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel5)
                .addComponent(txtfoodname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(txtmealid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel2))
            .addGap(18, 18, 18)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(txtprice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
            .addGap(18, 18, 18)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel7)
                .addComponent(txtquantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(26, 26, 26)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(Date)
                .addComponent(txtdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(23, 23, 23)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(txtlocation))
            .addGap(26, 26, 26)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(txttotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel11))
            .addGap(23, 23, 23)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(update))
                .addComponent(Delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(18, 18, 18)
            .addComponent(order)
            .addContainerGap())
    );

    jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
    jLabel10.setText(" MY ORDER");

    logout.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
    logout.setIcon(new javax.swing.ImageIcon("C:\\Users\\admin\\Downloads\\Cafe Image & Icon\\images\\logout.png")); // NOI18N
    logout.setText("LOG OUT");
    logout.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            logoutActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(415, 415, 415)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(txtsubtotal, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(260, 260, 260)
                    .addComponent(logout))
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(28, 28, 28)
                            .addComponent(jLabel8))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(365, 365, 365)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 862, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(1114, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(205, 205, 205))
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(221, 221, 221)
                            .addComponent(jLabel8))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(33, 33, 33)
                            .addComponent(jLabel10)))
                    .addGap(18, 18, 18)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtsubtotal, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9)
                        .addComponent(logout, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void breakfastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_breakfastActionPerformed
        // TODO add your handling code here:
        breakfast();
    }//GEN-LAST:event_breakfastActionPerformed

    private void lunchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lunchActionPerformed
        // TODO add your handling code here:
        lunch();
    }//GEN-LAST:event_lunchActionPerformed

    private void dessertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dessertActionPerformed
        // TODO add your handling code here:
        dessert();
    }//GEN-LAST:event_dessertActionPerformed

    private void dinnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dinnerActionPerformed
        // TODO add your handling code here:
        dinner();
    }//GEN-LAST:event_dinnerActionPerformed

    private void drinksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drinksActionPerformed
        // TODO add your handling code here:
        drinks();
    }//GEN-LAST:event_drinksActionPerformed

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        // TODO add your handling code here:
        insertrecord();
        totalcalculation();
        clear(); 
    }//GEN-LAST:event_submitActionPerformed

    private void txtlocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtlocationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtlocationActionPerformed

    private void menutableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menutableMouseClicked
        // TODO add your handling code here:
        gettabledetails();
    }//GEN-LAST:event_menutableMouseClicked

    private void orderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderActionPerformed
        // TODO add your handling code here:
        displayorder();
    }//GEN-LAST:event_orderActionPerformed

    private void txttotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txttotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txttotalActionPerformed

    private void txttotalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txttotalMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txttotalMouseClicked

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        updaterecord();
        
    }//GEN-LAST:event_updateActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
        deleterecord();
    }//GEN-LAST:event_DeleteActionPerformed

    private void myorderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_myorderMouseClicked
        // TODO add your handling code here:
        ordertableclicked();

    }//GEN-LAST:event_myorderMouseClicked

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:
        logout();
    }//GEN-LAST:event_logoutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new orders().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Date;
    private javax.swing.JButton Delete;
    private javax.swing.JButton breakfast;
    private javax.swing.JButton dessert;
    private javax.swing.JButton dinner;
    private javax.swing.JButton drinks;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton logout;
    private javax.swing.JButton lunch;
    private javax.swing.JTable menutable;
    private javax.swing.JTable myorder;
    private javax.swing.JButton order;
    private javax.swing.JButton submit;
    private com.toedter.calendar.JDateChooser txtdate;
    private javax.swing.JTextField txtfoodname;
    private javax.swing.JTextField txtlocation;
    private javax.swing.JTextField txtmealid;
    private javax.swing.JTextField txtorderid;
    private javax.swing.JTextField txtprice;
    private javax.swing.JTextField txtquantity;
    private javax.swing.JTextField txtsubtotal;
    private javax.swing.JTextField txttotal;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables

    private void myconnection() {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    try{
                     
           cn=DriverManager.getConnection("jdbc:mysql://localhost/studentdatabase", "root", null);
                      
          pst=cn.prepareStatement("select * from menu_catalogue", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
          rs=pst.executeQuery();
           
           //JOptionPane.showMessageDialog(null, "Successfully Connected!");
       }
       catch(Exception ex)
       {
           //System.out.print(e);
           ex.printStackTrace();
       }
    }

    private void breakfast() //the following are buttons which when clicked 
    {
      //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody 
    String sql="SELECT ID, NAME, DESCRIPTION, PRICE FROM menu_catalogue WHERE TYPE = 'BREAKFAST'"; 
      try
    {
      PreparedStatement pst = cn.prepareStatement(sql);
      ResultSet rs = pst.executeQuery();
      DefaultTableModel model = (DefaultTableModel) menutable.getModel();
      model.setRowCount(0);
      
      while(rs.next())
      {
          model.addRow(new String[] {rs.getString(1), rs.getString(2),rs.getString(3), rs.getString(4)});
      }
      
    }
    
    catch (Exception ex)
            {
              System.out.println("Error" +ex.getMessage());
            }
    }

    private void lunch() {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    String sql="SELECT ID, NAME, DESCRIPTION, PRICE FROM menu_catalogue WHERE TYPE = 'LUNCH'"; 
      try
    {
      PreparedStatement pst = cn.prepareStatement(sql);
      ResultSet rs = pst.executeQuery();
      DefaultTableModel model = (DefaultTableModel) menutable.getModel();
      model.setRowCount(0);
      
      while(rs.next())
      {
          model.addRow(new String[] {rs.getString(1), rs.getString(2),rs.getString(3), rs.getString(4)});
      }
      
    }
    
    catch (Exception ex)
            {
              System.out.println("Error" +ex.getMessage());
            }
    
    }

    private void dinner() {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    String sql="SELECT ID, NAME, DESCRIPTION, PRICE FROM menu_catalogue WHERE TYPE = 'DINNER'"; 
      try
    {
      PreparedStatement pst = cn.prepareStatement(sql);
      ResultSet rs = pst.executeQuery();
      DefaultTableModel model = (DefaultTableModel) menutable.getModel();
      model.setRowCount(0);
      
      while(rs.next())
      {
          model.addRow(new String[] {rs.getString(1), rs.getString(2),rs.getString(3), rs.getString(4)});
      }
      
    }
    
    catch (Exception ex)
            {
              System.out.println("Error" +ex.getMessage());
            }
    
    }

    private void dessert() {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
      String sql="SELECT ID, NAME, DESCRIPTION, PRICE FROM menu_catalogue WHERE TYPE = 'DESSERT'"; 
      try
    {
      PreparedStatement pst = cn.prepareStatement(sql);
      ResultSet rs = pst.executeQuery();
      DefaultTableModel model = (DefaultTableModel) menutable.getModel();
      model.setRowCount(0);
      
      while(rs.next())
      {
          model.addRow(new String[] {rs.getString(1), rs.getString(2),rs.getString(3), rs.getString(4)});
      }
      
    }
    
    catch (Exception ex)
            {
              System.out.println("Error" +ex.getMessage());
            }
    }

    private void drinks() {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    String sql="SELECT ID, NAME, DESCRIPTION, PRICE FROM menu_catalogue WHERE TYPE = 'BEVERAGES'"; 
      try
    {
      PreparedStatement pst = cn.prepareStatement(sql);
      ResultSet rs = pst.executeQuery();
      DefaultTableModel model = (DefaultTableModel) menutable.getModel();
      model.setRowCount(0);
      
      while(rs.next())
      {
          model.addRow(new String[] {rs.getString(1), rs.getString(2),rs.getString(3), rs.getString(4)});
      }
      
    }
    
    catch (Exception ex)
            {
              System.out.println("Error" +ex.getMessage());
            }
       
    }

    private void insertrecord() //we're inserting into myorders table 
    {
       // throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
       try{
       Class.forName("com.mysql.cj.jdbc.Driver");
       cn=DriverManager.getConnection("jdbc:mysql://localhost/studentdatabase", "root", null); 
       String sql = "insert into orders values(?,?,?,?,?,?,?,?)";
       PreparedStatement pstmt = cn.prepareStatement(sql);
       getlastid();
       pstmt.setString(1,txtorderid.getText());
       pstmt.setString(2,txtmealid.getText());
       pstmt.setString(3,txtfoodname.getText());
       pstmt.setString(4,txtprice.getText());
       pstmt.setString(5, txtquantity.getText());
       pstmt.setString(6,((JTextField)txtdate.getDateEditor().getUiComponent()).getText());
       pstmt.setString(7,txtlocation.getText());
       totalcalculation();
       pstmt.setString(8, txttotal.getText());
    
      pstmt.executeUpdate();
      clear();
      displayorder();
     
      JOptionPane.showMessageDialog(null, "insertion successful");
      
    }
       catch (Exception e)
       {
           JOptionPane.showMessageDialog(null, e);
       }
          
    }
    private void clear() //clear text fields
    {
       // throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
       txtfoodname.setText(null);
       txtprice.setText(null);
       txtquantity.setText(null);
       txtdate.setDate(null);
       txtlocation.setText(null);
       txttotal.setText(null);
    }

    private void gettabledetails() //allow for display on the text fields 
    {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    DefaultTableModel model = (DefaultTableModel) menutable.getModel();
    int n=menutable.getSelectedRow();
    txtfoodname.setText(model.getValueAt(n, 1).toString());
    txtprice.setText(model.getValueAt(n, 3).toString());
    txtmealid.setText(model.getValueAt(n, 0).toString());
    }

    private void getsum() {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    
        int sum = 0;
        for (int i =0; i<myorder.getRowCount();i++)
        {
            sum = sum + Integer.parseInt(myorder.getValueAt(i, 6).toString());
        }
    
        txtsubtotal.setText(Integer.toString(sum));
    
    }

    private void displayorder() {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
      String sql = "select * from orders";
      
      try
    {
      PreparedStatement pst = cn.prepareStatement(sql);
      ResultSet rs = pst.executeQuery();
      DefaultTableModel model = (DefaultTableModel) myorder.getModel();
      model.setRowCount(0);
      
      while(rs.next())
      {
          model.addRow(new String[] {rs.getString(1), rs.getString(3),rs.getString(4), rs.getString(5),rs.getString(6),rs.getString(7),rs.getString(8)});    
      }
     getsum();
     
    }
      
    
    catch (Exception ex)
            {
              System.out.println("Error" +ex.getMessage());
            }
    
    }

    private void totalcalculation() {
    
    int a = Integer.parseInt(txtprice.getText());
   int b =  Integer.parseInt(txtquantity.getText());
    
    int total = a * b;
    txttotal.setText(Integer.toString(total));
    }

    private void Fill_date() {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody    
    }

    private void ordertableclicked() {
       try {
            // throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            DefaultTableModel model = (DefaultTableModel) myorder.getModel();
            int n=myorder.getSelectedRow();
        
            txtorderid.setText(model.getValueAt(n, 0).toString());
            txtfoodname.setText(model.getValueAt(n, 1).toString());
            txtprice.setText(model.getValueAt(n, 2).toString());
            txtquantity.setText(model.getValueAt(n, 3).toString());
            Date date = new SimpleDateFormat("yyyy-MM-dd").parse((String)model.getValueAt(n,4));
            txtdate.setDate(date);
            txtlocation.setText(model.getValueAt(n, 5).toString());
            txttotal.setText(model.getValueAt(n, 6).toString());
            //getsum();
        } catch (Exception ex) {
            System.out.println("Error" +ex.getMessage());
        }
    }

    private void updaterecord() {
       // throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
     
       DefaultTableModel model = (DefaultTableModel) myorder.getModel();
      
    //if single row is selected then update
    //CODE BELOW ONLY UPDATES THE TABLE
   if(myorder.getSelectedRowCount() == 1)
   {
      
      String ID = txtorderid.getText();
      String mealid = txtmealid.getText();
      String foodname = txtfoodname.getText();
      String price = txtprice.getText();
      String quantity = txtquantity.getText();
      Date date = txtdate.getDate();
      String location = txtlocation.getText();
      totalcalculation();
      String total = txttotal.getText();
      
        //set updated values on table row
       
    model.setValueAt(ID, myorder.getSelectedRow(), 0);  
    model.setValueAt(ID, myorder.getSelectedRow(), 1); 
    model.setValueAt(foodname, myorder.getSelectedRow(), 1);
    model.setValueAt(price, myorder.getSelectedRow(), 2);
    model.setValueAt(quantity, myorder.getSelectedRow(), 3);
    model.setValueAt(date, myorder.getSelectedRow(), 4);
    model.setValueAt(location, myorder.getSelectedRow(), 5);
    model.setValueAt(total, myorder.getSelectedRow(), 6);
    
     try{
         String sql = "UPDATE orders SET ID =?, Name = ?, Price = ?, QUANTITY = ?, `Delivery Date` = ?, Location = ?, Total = ? WHERE ORDER_ID = ?";
       
       PreparedStatement pstmt = cn.prepareStatement(sql);
        
        pstmt.setString(1,mealid);
       pstmt.setString(2,foodname);
       pstmt.setString(3,price);
      pstmt.setString(4, quantity);
       pstmt.setString(5,((JTextField)txtdate.getDateEditor().getUiComponent()).getText());
       pstmt.setString(6,location);
      totalcalculation();
       pstmt.setInt(7, Integer.parseInt(total));
        pstmt.setString(8,ID);
       pstmt.executeUpdate();
     
        
        
       }
       catch (Exception e)
       {
           JOptionPane.showMessageDialog(null, e);
           
       }
     //update message
    JOptionPane.showMessageDialog(null, "order updated"); 
    }
    
   
   else if(myorder.getRowCount()==0)
       {
           JOptionPane.showMessageDialog(null,"No orders placed");
       }
       else{
           JOptionPane.showMessageDialog(null, "Please select single row for update");
       }
   getsum();
    }
    
      
   
    private void deleterecord() {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        try 
        {
            Class.forName("com.mysql.cj.jdbc.Driver");
            cn=DriverManager.getConnection("jdbc:mysql://localhost/studentdatabase", "root", null);
            String sql = "delete from orders where ORDER_ID = ?";
           PreparedStatement pst = cn.prepareStatement(sql);
           pst.setString(1, txtorderid.getText());
           
           pst.executeUpdate();
           JOptionPane.showMessageDialog(null, "deleted");
           clear();
           displayorder();
           
           
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void orderhistory() {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void logout() {
       // throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    try{
       new apt3040project().setVisible(true); 
       dispose();
    }
    catch(Exception e)
    {
        JOptionPane.showMessageDialog(null,e);
    }
    
    
    
    }
}
   


   

    
    
    
 //   }


